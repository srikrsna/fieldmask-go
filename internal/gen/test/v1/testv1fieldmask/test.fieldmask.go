// Code generated by protoc-gen-fieldmask-go. DO NOT EDIT.
//
// Source: test/v1/test.proto

package testv1fieldmask

import (
	fieldmask_go "github.com/srikrsna/fieldmask-go"
)

var AllMask = All("")

// All is the field mask for All
type All string

func (f All) R() Repeated {
	if f == "" {
		return "r"
	}
	return Repeated(string(f) + "." + "r")
}

func (f All) S() Singular {
	if f == "" {
		return "s"
	}
	return Singular(string(f) + "." + "s")
}

func (f All) OF() OneOf {
	if f == "" {
		return "o_f"
	}
	return OneOf(string(f) + "." + "o_f")
}

func (f All) E() string {
	if f == "" {
		return "e"
	}
	return string(string(f) + "." + "e")
}

func (f All) OW() OneOfWKT {
	if f == "" {
		return "o_w"
	}
	return OneOfWKT(string(f) + "." + "o_w")
}

func (f All) W() WKTs {
	if f == "" {
		return "w"
	}
	return WKTs(string(f) + "." + "w")
}

func (f All) O() Optionals {
	if f == "" {
		return "o"
	}
	return Optionals(string(f) + "." + "o")
}

func (f All) RW() RepeatedWKTs {
	if f == "" {
		return "r_w"
	}
	return RepeatedWKTs(string(f) + "." + "r_w")
}

func (f All) N() Nested {
	if f == "" {
		return "n"
	}
	return Nested(string(f) + "." + "n")
}

var RepeatedMask = Repeated("")

// Repeated is the field mask for Repeated
type Repeated string

func (f Repeated) S() fieldmask_go.Slice[string] {
	if f == "" {
		return "s"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "s")
}

func (f Repeated) I32() fieldmask_go.Slice[string] {
	if f == "" {
		return "i32"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "i32")
}

func (f Repeated) I64() fieldmask_go.Slice[string] {
	if f == "" {
		return "i64"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "i64")
}

func (f Repeated) U32() fieldmask_go.Slice[string] {
	if f == "" {
		return "u32"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "u32")
}

func (f Repeated) U64() fieldmask_go.Slice[string] {
	if f == "" {
		return "u64"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "u64")
}

func (f Repeated) F32() fieldmask_go.Slice[string] {
	if f == "" {
		return "f32"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "f32")
}

func (f Repeated) F64() fieldmask_go.Slice[string] {
	if f == "" {
		return "f64"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "f64")
}

func (f Repeated) Si32() fieldmask_go.Slice[string] {
	if f == "" {
		return "si32"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "si32")
}

func (f Repeated) Si64() fieldmask_go.Slice[string] {
	if f == "" {
		return "si64"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "si64")
}

func (f Repeated) Fi32() fieldmask_go.Slice[string] {
	if f == "" {
		return "fi32"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "fi32")
}

func (f Repeated) Fi64() fieldmask_go.Slice[string] {
	if f == "" {
		return "fi64"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "fi64")
}

func (f Repeated) Sfi32() fieldmask_go.Slice[string] {
	if f == "" {
		return "sfi32"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "sfi32")
}

func (f Repeated) Sfi64() fieldmask_go.Slice[string] {
	if f == "" {
		return "sfi64"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "sfi64")
}

func (f Repeated) Bl() fieldmask_go.Slice[string] {
	if f == "" {
		return "bl"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "bl")
}

func (f Repeated) By() fieldmask_go.Slice[string] {
	if f == "" {
		return "by"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "by")
}

func (f Repeated) E() fieldmask_go.Slice[string] {
	if f == "" {
		return "e"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "e")
}

func (f Repeated) Msg() fieldmask_go.Slice[Message] {
	if f == "" {
		return "msg"
	}
	return fieldmask_go.Slice[Message](string(f) + "." + "msg")
}

var OptionalsMask = Optionals("")

// Optionals is the field mask for Optionals
type Optionals string

func (f Optionals) Id() string {
	if f == "" {
		return "id"
	}
	return string(string(f) + "." + "id")
}

func (f Optionals) I32() string {
	if f == "" {
		return "i32"
	}
	return string(string(f) + "." + "i32")
}

func (f Optionals) I64() string {
	if f == "" {
		return "i64"
	}
	return string(string(f) + "." + "i64")
}

func (f Optionals) U32() string {
	if f == "" {
		return "u32"
	}
	return string(string(f) + "." + "u32")
}

func (f Optionals) U64() string {
	if f == "" {
		return "u64"
	}
	return string(string(f) + "." + "u64")
}

func (f Optionals) F32() string {
	if f == "" {
		return "f32"
	}
	return string(string(f) + "." + "f32")
}

func (f Optionals) F64() string {
	if f == "" {
		return "f64"
	}
	return string(string(f) + "." + "f64")
}

func (f Optionals) Si32() string {
	if f == "" {
		return "si32"
	}
	return string(string(f) + "." + "si32")
}

func (f Optionals) Si64() string {
	if f == "" {
		return "si64"
	}
	return string(string(f) + "." + "si64")
}

func (f Optionals) Fi32() string {
	if f == "" {
		return "fi32"
	}
	return string(string(f) + "." + "fi32")
}

func (f Optionals) Fi64() string {
	if f == "" {
		return "fi64"
	}
	return string(string(f) + "." + "fi64")
}

func (f Optionals) Sfi32() string {
	if f == "" {
		return "sfi32"
	}
	return string(string(f) + "." + "sfi32")
}

func (f Optionals) Sfi64() string {
	if f == "" {
		return "sfi64"
	}
	return string(string(f) + "." + "sfi64")
}

func (f Optionals) Bl() string {
	if f == "" {
		return "bl"
	}
	return string(string(f) + "." + "bl")
}

func (f Optionals) By() string {
	if f == "" {
		return "by"
	}
	return string(string(f) + "." + "by")
}

func (f Optionals) S() Message {
	if f == "" {
		return "s"
	}
	return Message(string(f) + "." + "s")
}

func (f Optionals) E() string {
	if f == "" {
		return "e"
	}
	return string(string(f) + "." + "e")
}

var MessageMask = Message("")

// Message is the field mask for Message
type Message string

func (f Message) Id() string {
	if f == "" {
		return "id"
	}
	return string(string(f) + "." + "id")
}

var WKTsMask = WKTs("")

// WKTs is the field mask for WKTs
type WKTs string

func (f WKTs) A() string {
	if f == "" {
		return "a"
	}
	return string(string(f) + "." + "a")
}

func (f WKTs) D() string {
	if f == "" {
		return "d"
	}
	return string(string(f) + "." + "d")
}

func (f WKTs) T() string {
	if f == "" {
		return "t"
	}
	return string(string(f) + "." + "t")
}

func (f WKTs) St() string {
	if f == "" {
		return "st"
	}
	return string(string(f) + "." + "st")
}

func (f WKTs) I32() string {
	if f == "" {
		return "i32"
	}
	return string(string(f) + "." + "i32")
}

func (f WKTs) Ui32() string {
	if f == "" {
		return "ui32"
	}
	return string(string(f) + "." + "ui32")
}

func (f WKTs) I64() string {
	if f == "" {
		return "i64"
	}
	return string(string(f) + "." + "i64")
}

func (f WKTs) U64() string {
	if f == "" {
		return "u64"
	}
	return string(string(f) + "." + "u64")
}

func (f WKTs) F32() string {
	if f == "" {
		return "f32"
	}
	return string(string(f) + "." + "f32")
}

func (f WKTs) F64() string {
	if f == "" {
		return "f64"
	}
	return string(string(f) + "." + "f64")
}

func (f WKTs) B() string {
	if f == "" {
		return "b"
	}
	return string(string(f) + "." + "b")
}

func (f WKTs) S() string {
	if f == "" {
		return "s"
	}
	return string(string(f) + "." + "s")
}

func (f WKTs) By() string {
	if f == "" {
		return "by"
	}
	return string(string(f) + "." + "by")
}

func (f WKTs) Fm() string {
	if f == "" {
		return "fm"
	}
	return string(string(f) + "." + "fm")
}

func (f WKTs) Em() string {
	if f == "" {
		return "em"
	}
	return string(string(f) + "." + "em")
}

var RepeatedWKTsMask = RepeatedWKTs("")

// RepeatedWKTs is the field mask for RepeatedWKTs
type RepeatedWKTs string

func (f RepeatedWKTs) A() fieldmask_go.Slice[string] {
	if f == "" {
		return "a"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "a")
}

func (f RepeatedWKTs) D() fieldmask_go.Slice[string] {
	if f == "" {
		return "d"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "d")
}

func (f RepeatedWKTs) T() fieldmask_go.Slice[string] {
	if f == "" {
		return "t"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "t")
}

func (f RepeatedWKTs) St() fieldmask_go.Slice[string] {
	if f == "" {
		return "st"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "st")
}

func (f RepeatedWKTs) I32() fieldmask_go.Slice[string] {
	if f == "" {
		return "i32"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "i32")
}

func (f RepeatedWKTs) Ui32() fieldmask_go.Slice[string] {
	if f == "" {
		return "ui32"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "ui32")
}

func (f RepeatedWKTs) I64() fieldmask_go.Slice[string] {
	if f == "" {
		return "i64"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "i64")
}

func (f RepeatedWKTs) U64() fieldmask_go.Slice[string] {
	if f == "" {
		return "u64"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "u64")
}

func (f RepeatedWKTs) F32() fieldmask_go.Slice[string] {
	if f == "" {
		return "f32"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "f32")
}

func (f RepeatedWKTs) F64() fieldmask_go.Slice[string] {
	if f == "" {
		return "f64"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "f64")
}

func (f RepeatedWKTs) B() fieldmask_go.Slice[string] {
	if f == "" {
		return "b"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "b")
}

func (f RepeatedWKTs) S() fieldmask_go.Slice[string] {
	if f == "" {
		return "s"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "s")
}

func (f RepeatedWKTs) By() fieldmask_go.Slice[string] {
	if f == "" {
		return "by"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "by")
}

func (f RepeatedWKTs) Fm() fieldmask_go.Slice[string] {
	if f == "" {
		return "fm"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "fm")
}

func (f RepeatedWKTs) Em() fieldmask_go.Slice[string] {
	if f == "" {
		return "em"
	}
	return fieldmask_go.Slice[string](string(f) + "." + "em")
}

var OneOfMask = OneOf("")

// OneOf is the field mask for OneOf
type OneOf string

func (f OneOf) E() string {
	if f == "" {
		return "e"
	}
	return string(string(f) + "." + "e")
}

func (f OneOf) S() string {
	if f == "" {
		return "s"
	}
	return string(string(f) + "." + "s")
}

func (f OneOf) I32() string {
	if f == "" {
		return "i32"
	}
	return string(string(f) + "." + "i32")
}

func (f OneOf) I64() string {
	if f == "" {
		return "i64"
	}
	return string(string(f) + "." + "i64")
}

func (f OneOf) U32() string {
	if f == "" {
		return "u32"
	}
	return string(string(f) + "." + "u32")
}

func (f OneOf) U64() string {
	if f == "" {
		return "u64"
	}
	return string(string(f) + "." + "u64")
}

func (f OneOf) F32() string {
	if f == "" {
		return "f32"
	}
	return string(string(f) + "." + "f32")
}

func (f OneOf) F64() string {
	if f == "" {
		return "f64"
	}
	return string(string(f) + "." + "f64")
}

func (f OneOf) Si32() string {
	if f == "" {
		return "si32"
	}
	return string(string(f) + "." + "si32")
}

func (f OneOf) Si64() string {
	if f == "" {
		return "si64"
	}
	return string(string(f) + "." + "si64")
}

func (f OneOf) Fi32() string {
	if f == "" {
		return "fi32"
	}
	return string(string(f) + "." + "fi32")
}

func (f OneOf) Fi64() string {
	if f == "" {
		return "fi64"
	}
	return string(string(f) + "." + "fi64")
}

func (f OneOf) Sfi32() string {
	if f == "" {
		return "sfi32"
	}
	return string(string(f) + "." + "sfi32")
}

func (f OneOf) Sfi64() string {
	if f == "" {
		return "sfi64"
	}
	return string(string(f) + "." + "sfi64")
}

func (f OneOf) Bl() string {
	if f == "" {
		return "bl"
	}
	return string(string(f) + "." + "bl")
}

func (f OneOf) By() string {
	if f == "" {
		return "by"
	}
	return string(string(f) + "." + "by")
}

func (f OneOf) Msg() Message {
	if f == "" {
		return "msg"
	}
	return Message(string(f) + "." + "msg")
}

var OneOfWKTMask = OneOfWKT("")

// OneOfWKT is the field mask for OneOfWKT
type OneOfWKT string

func (f OneOfWKT) A() string {
	if f == "" {
		return "a"
	}
	return string(string(f) + "." + "a")
}

func (f OneOfWKT) D() string {
	if f == "" {
		return "d"
	}
	return string(string(f) + "." + "d")
}

func (f OneOfWKT) T() string {
	if f == "" {
		return "t"
	}
	return string(string(f) + "." + "t")
}

func (f OneOfWKT) St() string {
	if f == "" {
		return "st"
	}
	return string(string(f) + "." + "st")
}

func (f OneOfWKT) I32() string {
	if f == "" {
		return "i32"
	}
	return string(string(f) + "." + "i32")
}

func (f OneOfWKT) Ui32() string {
	if f == "" {
		return "ui32"
	}
	return string(string(f) + "." + "ui32")
}

func (f OneOfWKT) I64() string {
	if f == "" {
		return "i64"
	}
	return string(string(f) + "." + "i64")
}

func (f OneOfWKT) U64() string {
	if f == "" {
		return "u64"
	}
	return string(string(f) + "." + "u64")
}

func (f OneOfWKT) F32() string {
	if f == "" {
		return "f32"
	}
	return string(string(f) + "." + "f32")
}

func (f OneOfWKT) F64() string {
	if f == "" {
		return "f64"
	}
	return string(string(f) + "." + "f64")
}

func (f OneOfWKT) B() string {
	if f == "" {
		return "b"
	}
	return string(string(f) + "." + "b")
}

func (f OneOfWKT) S() string {
	if f == "" {
		return "s"
	}
	return string(string(f) + "." + "s")
}

func (f OneOfWKT) By() string {
	if f == "" {
		return "by"
	}
	return string(string(f) + "." + "by")
}

func (f OneOfWKT) Fm() string {
	if f == "" {
		return "fm"
	}
	return string(string(f) + "." + "fm")
}

func (f OneOfWKT) Em() string {
	if f == "" {
		return "em"
	}
	return string(string(f) + "." + "em")
}

var SingularMask = Singular("")

// Singular is the field mask for Singular
type Singular string

func (f Singular) Mp() string {
	if f == "" {
		return "mp"
	}
	return string(string(f) + "." + "mp")
}

func (f Singular) E() string {
	if f == "" {
		return "e"
	}
	return string(string(f) + "." + "e")
}

func (f Singular) S() string {
	if f == "" {
		return "s"
	}
	return string(string(f) + "." + "s")
}

func (f Singular) I32() string {
	if f == "" {
		return "i32"
	}
	return string(string(f) + "." + "i32")
}

func (f Singular) I64() string {
	if f == "" {
		return "i64"
	}
	return string(string(f) + "." + "i64")
}

func (f Singular) U32() string {
	if f == "" {
		return "u32"
	}
	return string(string(f) + "." + "u32")
}

func (f Singular) U64() string {
	if f == "" {
		return "u64"
	}
	return string(string(f) + "." + "u64")
}

func (f Singular) F32() string {
	if f == "" {
		return "f32"
	}
	return string(string(f) + "." + "f32")
}

func (f Singular) F64() string {
	if f == "" {
		return "f64"
	}
	return string(string(f) + "." + "f64")
}

func (f Singular) Si32() string {
	if f == "" {
		return "si32"
	}
	return string(string(f) + "." + "si32")
}

func (f Singular) Si64() string {
	if f == "" {
		return "si64"
	}
	return string(string(f) + "." + "si64")
}

func (f Singular) Fi32() string {
	if f == "" {
		return "fi32"
	}
	return string(string(f) + "." + "fi32")
}

func (f Singular) Fi64() string {
	if f == "" {
		return "fi64"
	}
	return string(string(f) + "." + "fi64")
}

func (f Singular) Sfi32() string {
	if f == "" {
		return "sfi32"
	}
	return string(string(f) + "." + "sfi32")
}

func (f Singular) Sfi64() string {
	if f == "" {
		return "sfi64"
	}
	return string(string(f) + "." + "sfi64")
}

func (f Singular) Bl() string {
	if f == "" {
		return "bl"
	}
	return string(string(f) + "." + "bl")
}

func (f Singular) By() string {
	if f == "" {
		return "by"
	}
	return string(string(f) + "." + "by")
}

func (f Singular) Msg() Message {
	if f == "" {
		return "msg"
	}
	return Message(string(f) + "." + "msg")
}

var NestedMask = Nested("")

// Nested is the field mask for Nested
type Nested string

func (f Nested) N() Nested_NestedMessage {
	if f == "" {
		return "n"
	}
	return Nested_NestedMessage(string(f) + "." + "n")
}

var Nested_NestedMessageMask = Nested_NestedMessage("")

// Nested_NestedMessage is the field mask for NestedMessage
type Nested_NestedMessage string

func (f Nested_NestedMessage) E() string {
	if f == "" {
		return "e"
	}
	return string(string(f) + "." + "e")
}
